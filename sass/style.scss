@charset "UTF-8";

// **************************************************
/* Vendor
 * This holds all vendor related styling imports
 */

// bourbon
@import "bourbon/bourbon";
@import "vendor/grid";

/* settings
 * This holds any global settings for your project.
 * this layer should only house settings that need to be accessed from anywhere.
 */

@import "settings/colors";
@import "settings/variables";


/* tools
 * namely global mixins and functions.
 * Any mixin or function that does not need accessing globally
 * should belong in the partial to which it relates.
 */

@import "tools/mixins";
@import "tools/spacing_mixins";


/* generic
 * Ground-zero styles
 * This layer is seldom modified, and is usually the same across any projects you work on.
 * It contains things like Normalize.css, global box-sizing rules, CSS resets and so on.
 */

@import "generic/reset";
@import "generic/generic";


/* elements
 * The Elements layer is typically the last one in which we'd find bare,
 * element-based selectors, and is very rarely added to or changed after initial setup.
 * What does an h1 look like without a class on it? What does an a look like without a class on it?
 * The Elements layer binds onto bare HTML element (or 'type') selectors only.
 */

@import "elements/general";
@import "elements/typo";
@import "elements/forms";
@import "elements/lists";
@import "elements/tables";
@import "elements/links";

/* objects -
 * Use agnostic naming.
 * This is the first layer in which we find class-based selectors.
 * These are concerned with styling non-cosmetic design patterns, or 'objects'.
 * Objects can range from something as simple as a .wrapper element,
 * to layout systems, through to things like the OOCSS poster child – the Media Object.
 * for example ul who affects all UL's + choose name's who don't describe the content
 */

@import "objects/grid";
@import "objects/errors";
@import "objects/extends";
@import "objects/animations";
@import "objects/typo-modifiers";
@import "objects/lists";


/* components
 * The Components layer is where we begin to style recognisable pieces of UI.
 * more specific then objects, We're still binding onto classes here, so our specificity hasn't yet increased.
 * However, this layer is more explicit than the last one in that we are now styling explicit,
 * designed pieces of the DOM. This is where the majority of your work will happen after initial project set-up.
 */


/* Trumps
 * This layer beats – or 'trumps' –
 * all other layers, and has the power to override anything at all that has gone before it.
 * It is inelegant and heavy-handed, and contains utility and helper classes, hacks and overrides.
 */

@import "trumps/display";

// functionial css
@import "trumps/utils";
@import "trumps/visual";