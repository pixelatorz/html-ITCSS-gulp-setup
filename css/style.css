@charset "UTF-8";
/* Vendor
 * This holds all vendor related styling imports
 */
/**
 * Profound Grid
 *
 * Built in Sass (SCSS) this responsive/adaptive grid supports both fixed and fluid layouts,
 * relative and fixed gutters, as well as your choice of semantic markup or generic '.grid-x' classes.
 *
 * The biggest difference to other grid systems is the use of negative margins for column
 * placements, avoiding the subpixel rounding issues that usually break/uglify fluid layouts
 * in some browsers.
 *
 * Nested columns are supported too, without having to reset the grid on each level.
 *
 * Credits/Inspiration:
 * -------------------
 * Semantic Grid: http://www.semantic.gs
 * Susy: http://susy.oddbird.net
 * Negative Grid: http://chrisplaneta.com/freebies/negativegrid-fluid-css-grid-by-chris-planeta/
 *
 * @author Profound Creative Studio
 * @url http://www.profoundgrid.com
 * @url http://www.weareprofound.com
 */
/**
 * Establish the grid-containing element.
 */
/**
 * Align an element to the grid.
 */
/**
 * Apply to any column to make it the last one of the current row.
 */
/* settings
 * This holds any global settings for your project.
 * this layer should only house settings that need to be accessed from anywhere.
 */
/* tools
 * namely global mixins and functions.
 * Any mixin or function that does not need accessing globally
 * should belong in the partial to which it relates.
 */
/* generic
 * Ground-zero styles
 * This layer is seldom modified, and is usually the same across any projects you work on.
 * It contains things like Normalize.css, global box-sizing rules, CSS resets and so on.
 */
html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  vertical-align: baseline; }

html {
  line-height: 1; }

ol, ul {
  list-style: none; }

table {
  border-collapse: collapse;
  border-spacing: 0; }

caption, th, td {
  text-align: left;
  font-weight: normal;
  vertical-align: middle; }

q, blockquote {
  quotes: none; }

q:before, q:after, blockquote:before, blockquote:after {
  content: "";
  content: none; }

a img {
  border: none; }

article, aside, details, figcaption, figure, footer, header, hgroup, menu, nav, section, summary {
  display: block; }

* {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box; }

*:active, *:focus {
  outline: none; }

/* elements
 * The Elements layer is typically the last one in which we'd find bare,
 * element-based selectors, and is very rarely added to or changed after initial setup.
 * What does an h1 look like without a class on it? What does an a look like without a class on it?
 * The Elements layer binds onto bare HTML element (or 'type') selectors only.
 */
body {
  margin: 0; }

iframe {
  width: 100%; }

html {
  font-size: 14px; }
  @media (min-width: 970px) {
    html {
      font-size: 16px; } }

body {
  font-size: 17px;
  font-size: 1.0625rem;
  line-height: 1.3;
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
  font-family: 'Roboto', sans-serif;
  color: #333333; }

h1, h2, h3, h4 {
  font-weight: normal;
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility; }
  h1.branded, h2.branded, h3.branded, h4.branded {
    color: #20ADE0; }

h1 {
  font-size: 35px;
  font-size: 2.1875rem;
  line-height: 1.25;
  margin-bottom: 30px;
  margin-bottom: 1.875rem; }

h2 {
  font-size: 30px;
  font-size: 1.875rem;
  line-height: 1.25;
  margin-bottom: 20px;
  margin-bottom: 1.25rem; }

h3 {
  font-size: 28px;
  font-size: 1.75rem;
  line-height: 1.25;
  margin-bottom: 17px;
  margin-bottom: 1.0625rem;
  font-weight: 700; }

h4 {
  font-size: 12px;
  font-size: 0.75rem;
  line-height: 1.25;
  margin-bottom: 17px;
  margin-bottom: 1.0625rem;
  text-transform: uppercase;
  font-weight: 700; }

em {
  font-style: italic; }

p {
  margin-bottom: 17px;
  margin-bottom: 1.0625rem; }

strong {
  font-weight: normal; }

a {
  color: #20ADE0;
  text-decoration: underline; }

/* objects -
 * Use agnostic naming.
 * This is the first layer in which we find class-based selectors.
 * These are concerned with styling non-cosmetic design patterns, or 'objects'.
 * Objects can range from something as simple as a .wrapper element,
 * to layout systems, through to things like the OOCSS poster child â€“ the Media Object.
 * for example ul who affects all UL's + choose name's who don't describe the content
 */
.row {
  width: 96%;
  margin: 0 2%;
  *zoom: 1;
  position: relative;
  margin: 0;
  width: 100%; }
  .row:after {
    content: "";
    display: table;
    clear: both; }

.clearfix {
  *zoom: 1; }
  .clearfix:after {
    content: "";
    display: table;
    clear: both; }

.container {
  width: 96%;
  margin: 0 2%;
  *zoom: 1;
  width: 100%;
  max-width: 1230px;
  margin: 0 auto;
  padding: 0 2%;
  padding: 0 16px;
  position: relative; }
  .container:after {
    content: "";
    display: table;
    clear: both; }
  @media (min-width: s) {
    .container {
      padding-left: 2%;
      padding-right: 2%; } }
  @media (min-width: 1300px) {
    .container {
      padding-left: 0;
      padding-right: 0; } }
  @media (min-width: xlg) {
    .container {
      padding-left: 0;
      padding-right: 0; } }

.container--small {
  width: 96%;
  margin: 0 2%;
  *zoom: 1;
  width: 100%;
  max-width: 1230px;
  margin: 0 auto;
  padding: 0 2%;
  padding: 0 16px;
  position: relative;
  max-width: 500px; }
  .container--small:after {
    content: "";
    display: table;
    clear: both; }
  @media (min-width: s) {
    .container--small {
      padding-left: 2%;
      padding-right: 2%; } }
  @media (min-width: 1300px) {
    .container--small {
      padding-left: 0;
      padding-right: 0; } }
  @media (min-width: xlg) {
    .container--small {
      padding-left: 0;
      padding-right: 0; } }

.container--medium {
  width: 96%;
  margin: 0 2%;
  *zoom: 1;
  width: 100%;
  max-width: 1230px;
  margin: 0 auto;
  padding: 0 2%;
  padding: 0 16px;
  position: relative;
  max-width: 960px; }
  .container--medium:after {
    content: "";
    display: table;
    clear: both; }
  @media (min-width: s) {
    .container--medium {
      padding-left: 2%;
      padding-right: 2%; } }
  @media (min-width: 1300px) {
    .container--medium {
      padding-left: 0;
      padding-right: 0; } }
  @media (min-width: xlg) {
    .container--medium {
      padding-left: 0;
      padding-right: 0; } }

.container--large {
  width: 96%;
  margin: 0 2%;
  *zoom: 1;
  width: 100%;
  max-width: 1230px;
  margin: 0 auto;
  padding: 0 2%;
  padding: 0 16px;
  max-width: 1600px;
  position: relative; }
  .container--large:after {
    content: "";
    display: table;
    clear: both; }
  @media (min-width: s) {
    .container--large {
      padding-left: 2%;
      padding-right: 2%; } }
  @media (min-width: 1300px) {
    .container--large {
      padding-left: 0;
      padding-right: 0; } }
  @media (min-width: xlg) {
    .container--large {
      padding-left: 0;
      padding-right: 0; } }

.subgrid {
  width: 96%;
  margin: 0 2%;
  *zoom: 1;
  position: relative;
  margin: 0;
  width: 100%;
  position: relative; }
  .subgrid:after {
    content: "";
    display: table;
    clear: both; }

@-webkit-keyframes popOut {
  0% {
    -webkit-transform: scale(1);
    -moz-transform: scale(1);
    -ms-transform: scale(1);
    -o-transform: scale(1);
    transform: scale(1); }
  10% {
    -webkit-transform: scale(1.2);
    -moz-transform: scale(1.2);
    -ms-transform: scale(1.2);
    -o-transform: scale(1.2);
    transform: scale(1.2); }
  100% {
    -webkit-transform: scale(0);
    -moz-transform: scale(0);
    -ms-transform: scale(0);
    -o-transform: scale(0);
    transform: scale(0); } }

@-moz-keyframes popOut {
  0% {
    -webkit-transform: scale(1);
    -moz-transform: scale(1);
    -ms-transform: scale(1);
    -o-transform: scale(1);
    transform: scale(1); }
  10% {
    -webkit-transform: scale(1.2);
    -moz-transform: scale(1.2);
    -ms-transform: scale(1.2);
    -o-transform: scale(1.2);
    transform: scale(1.2); }
  100% {
    -webkit-transform: scale(0);
    -moz-transform: scale(0);
    -ms-transform: scale(0);
    -o-transform: scale(0);
    transform: scale(0); } }

@keyframes popOut {
  0% {
    -webkit-transform: scale(1);
    -moz-transform: scale(1);
    -ms-transform: scale(1);
    -o-transform: scale(1);
    transform: scale(1); }
  10% {
    -webkit-transform: scale(1.2);
    -moz-transform: scale(1.2);
    -ms-transform: scale(1.2);
    -o-transform: scale(1.2);
    transform: scale(1.2); }
  100% {
    -webkit-transform: scale(0);
    -moz-transform: scale(0);
    -ms-transform: scale(0);
    -o-transform: scale(0);
    transform: scale(0); } }

@-webkit-keyframes popIn {
  0% {
    opacity: 0;
    -webkit-transform: scale(0.8);
    -moz-transform: scale(0.8);
    -ms-transform: scale(0.8);
    -o-transform: scale(0.8);
    transform: scale(0.8); }
  100% {
    opacity: 1;
    -webkit-transform: scale(1);
    -moz-transform: scale(1);
    -ms-transform: scale(1);
    -o-transform: scale(1);
    transform: scale(1); } }

@-moz-keyframes popIn {
  0% {
    opacity: 0;
    -webkit-transform: scale(0.8);
    -moz-transform: scale(0.8);
    -ms-transform: scale(0.8);
    -o-transform: scale(0.8);
    transform: scale(0.8); }
  100% {
    opacity: 1;
    -webkit-transform: scale(1);
    -moz-transform: scale(1);
    -ms-transform: scale(1);
    -o-transform: scale(1);
    transform: scale(1); } }

@keyframes popIn {
  0% {
    opacity: 0;
    -webkit-transform: scale(0.8);
    -moz-transform: scale(0.8);
    -ms-transform: scale(0.8);
    -o-transform: scale(0.8);
    transform: scale(0.8); }
  100% {
    opacity: 1;
    -webkit-transform: scale(1);
    -moz-transform: scale(1);
    -ms-transform: scale(1);
    -o-transform: scale(1);
    transform: scale(1); } }

@-webkit-keyframes popSmaller {
  0% {
    -webkit-transform: scale(1);
    -moz-transform: scale(1);
    -ms-transform: scale(1);
    -o-transform: scale(1);
    transform: scale(1); }
  10% {
    -webkit-transform: scale(1.1);
    -moz-transform: scale(1.1);
    -ms-transform: scale(1.1);
    -o-transform: scale(1.1);
    transform: scale(1.1); }
  100% {
    -webkit-transform: scale(0.8);
    -moz-transform: scale(0.8);
    -ms-transform: scale(0.8);
    -o-transform: scale(0.8);
    transform: scale(0.8); } }

@-moz-keyframes popSmaller {
  0% {
    -webkit-transform: scale(1);
    -moz-transform: scale(1);
    -ms-transform: scale(1);
    -o-transform: scale(1);
    transform: scale(1); }
  10% {
    -webkit-transform: scale(1.1);
    -moz-transform: scale(1.1);
    -ms-transform: scale(1.1);
    -o-transform: scale(1.1);
    transform: scale(1.1); }
  100% {
    -webkit-transform: scale(0.8);
    -moz-transform: scale(0.8);
    -ms-transform: scale(0.8);
    -o-transform: scale(0.8);
    transform: scale(0.8); } }

@keyframes popSmaller {
  0% {
    -webkit-transform: scale(1);
    -moz-transform: scale(1);
    -ms-transform: scale(1);
    -o-transform: scale(1);
    transform: scale(1); }
  10% {
    -webkit-transform: scale(1.1);
    -moz-transform: scale(1.1);
    -ms-transform: scale(1.1);
    -o-transform: scale(1.1);
    transform: scale(1.1); }
  100% {
    -webkit-transform: scale(0.8);
    -moz-transform: scale(0.8);
    -ms-transform: scale(0.8);
    -o-transform: scale(0.8);
    transform: scale(0.8); } }

@-webkit-keyframes popBigger {
  0% {
    -webkit-transform: scale(0.8);
    -moz-transform: scale(0.8);
    -ms-transform: scale(0.8);
    -o-transform: scale(0.8);
    transform: scale(0.8); }
  90% {
    -webkit-transform: scale(1.1);
    -moz-transform: scale(1.1);
    -ms-transform: scale(1.1);
    -o-transform: scale(1.1);
    transform: scale(1.1); }
  100% {
    -webkit-transform: scale(1);
    -moz-transform: scale(1);
    -ms-transform: scale(1);
    -o-transform: scale(1);
    transform: scale(1); } }

@-moz-keyframes popBigger {
  0% {
    -webkit-transform: scale(0.8);
    -moz-transform: scale(0.8);
    -ms-transform: scale(0.8);
    -o-transform: scale(0.8);
    transform: scale(0.8); }
  90% {
    -webkit-transform: scale(1.1);
    -moz-transform: scale(1.1);
    -ms-transform: scale(1.1);
    -o-transform: scale(1.1);
    transform: scale(1.1); }
  100% {
    -webkit-transform: scale(1);
    -moz-transform: scale(1);
    -ms-transform: scale(1);
    -o-transform: scale(1);
    transform: scale(1); } }

@keyframes popBigger {
  0% {
    -webkit-transform: scale(0.8);
    -moz-transform: scale(0.8);
    -ms-transform: scale(0.8);
    -o-transform: scale(0.8);
    transform: scale(0.8); }
  90% {
    -webkit-transform: scale(1.1);
    -moz-transform: scale(1.1);
    -ms-transform: scale(1.1);
    -o-transform: scale(1.1);
    transform: scale(1.1); }
  100% {
    -webkit-transform: scale(1);
    -moz-transform: scale(1);
    -ms-transform: scale(1);
    -o-transform: scale(1);
    transform: scale(1); } }

@-webkit-keyframes slideOutBottom {
  0% {
    -webkit-transform: translateY(0);
    -moz-transform: translateY(0);
    -ms-transform: translateY(0);
    -o-transform: translateY(0);
    transform: translateY(0); }
  10% {
    -webkit-transform: translateY(-20px);
    -moz-transform: translateY(-20px);
    -ms-transform: translateY(-20px);
    -o-transform: translateY(-20px);
    transform: translateY(-20px); }
  100% {
    -webkit-transform: translateY(100%);
    -moz-transform: translateY(100%);
    -ms-transform: translateY(100%);
    -o-transform: translateY(100%);
    transform: translateY(100%); } }

@-moz-keyframes slideOutBottom {
  0% {
    -webkit-transform: translateY(0);
    -moz-transform: translateY(0);
    -ms-transform: translateY(0);
    -o-transform: translateY(0);
    transform: translateY(0); }
  10% {
    -webkit-transform: translateY(-20px);
    -moz-transform: translateY(-20px);
    -ms-transform: translateY(-20px);
    -o-transform: translateY(-20px);
    transform: translateY(-20px); }
  100% {
    -webkit-transform: translateY(100%);
    -moz-transform: translateY(100%);
    -ms-transform: translateY(100%);
    -o-transform: translateY(100%);
    transform: translateY(100%); } }

@keyframes slideOutBottom {
  0% {
    -webkit-transform: translateY(0);
    -moz-transform: translateY(0);
    -ms-transform: translateY(0);
    -o-transform: translateY(0);
    transform: translateY(0); }
  10% {
    -webkit-transform: translateY(-20px);
    -moz-transform: translateY(-20px);
    -ms-transform: translateY(-20px);
    -o-transform: translateY(-20px);
    transform: translateY(-20px); }
  100% {
    -webkit-transform: translateY(100%);
    -moz-transform: translateY(100%);
    -ms-transform: translateY(100%);
    -o-transform: translateY(100%);
    transform: translateY(100%); } }

@-webkit-keyframes slideInTop {
  0% {
    opacity: 0;
    -webkit-transform: translateY(-50px);
    -moz-transform: translateY(-50px);
    -ms-transform: translateY(-50px);
    -o-transform: translateY(-50px);
    transform: translateY(-50px); }
  100% {
    opacity: 1;
    -webkit-transform: translateY(0);
    -moz-transform: translateY(0);
    -ms-transform: translateY(0);
    -o-transform: translateY(0);
    transform: translateY(0); } }

@-moz-keyframes slideInTop {
  0% {
    opacity: 0;
    -webkit-transform: translateY(-50px);
    -moz-transform: translateY(-50px);
    -ms-transform: translateY(-50px);
    -o-transform: translateY(-50px);
    transform: translateY(-50px); }
  100% {
    opacity: 1;
    -webkit-transform: translateY(0);
    -moz-transform: translateY(0);
    -ms-transform: translateY(0);
    -o-transform: translateY(0);
    transform: translateY(0); } }

@keyframes slideInTop {
  0% {
    opacity: 0;
    -webkit-transform: translateY(-50px);
    -moz-transform: translateY(-50px);
    -ms-transform: translateY(-50px);
    -o-transform: translateY(-50px);
    transform: translateY(-50px); }
  100% {
    opacity: 1;
    -webkit-transform: translateY(0);
    -moz-transform: translateY(0);
    -ms-transform: translateY(0);
    -o-transform: translateY(0);
    transform: translateY(0); } }

@-webkit-keyframes slideInBottom {
  0% {
    opacity: 0;
    -webkit-transform: translateY(50px);
    -moz-transform: translateY(50px);
    -ms-transform: translateY(50px);
    -o-transform: translateY(50px);
    transform: translateY(50px); }
  100% {
    opacity: 1;
    -webkit-transform: translateY(0);
    -moz-transform: translateY(0);
    -ms-transform: translateY(0);
    -o-transform: translateY(0);
    transform: translateY(0); } }

@-moz-keyframes slideInBottom {
  0% {
    opacity: 0;
    -webkit-transform: translateY(50px);
    -moz-transform: translateY(50px);
    -ms-transform: translateY(50px);
    -o-transform: translateY(50px);
    transform: translateY(50px); }
  100% {
    opacity: 1;
    -webkit-transform: translateY(0);
    -moz-transform: translateY(0);
    -ms-transform: translateY(0);
    -o-transform: translateY(0);
    transform: translateY(0); } }

@keyframes slideInBottom {
  0% {
    opacity: 0;
    -webkit-transform: translateY(50px);
    -moz-transform: translateY(50px);
    -ms-transform: translateY(50px);
    -o-transform: translateY(50px);
    transform: translateY(50px); }
  100% {
    opacity: 1;
    -webkit-transform: translateY(0);
    -moz-transform: translateY(0);
    -ms-transform: translateY(0);
    -o-transform: translateY(0);
    transform: translateY(0); } }

/* components
 * The Components layer is where we begin to style recognisable pieces of UI.
 * more specific then objects, We're still binding onto classes here, so our specificity hasn't yet increased.
 * However, this layer is more explicit than the last one in that we are now styling explicit,
 * designed pieces of the DOM. This is where the majority of your work will happen after initial project set-up.
 */
/* Trumps
 * This layer beats â€“ or 'trumps' â€“
 * all other layers, and has the power to override anything at all that has gone before it.
 * It is inelegant and heavy-handed, and contains utility and helper classes, hacks and overrides.
 */
.hide-mobile {
  display: none; }
  @media (min-width: 768px) {
    .hide-mobile {
      display: block; } }

.hide-mobile-inlineblock {
  display: none; }
  @media (min-width: 768px) {
    .hide-mobile-inlineblock {
      display: inline-block; } }

.hide-xs-inlineblock {
  display: none !important; }
  @media (min-width: 480px) {
    .hide-xs-inlineblock {
      display: inline-block !important; } }

.hide-desktop {
  display: block; }
  @media (min-width: 768px) {
    .hide-desktop {
      display: none; } }

.u-pull-left {
  float: left; }

.u-pull-right {
  float: right; }

.u-width100 {
  width: 100% !important; }

.u-width50 {
  width: 100%;
  width: 50%; }

.u-height100 {
  height: 100% !important; }

.u-vertical-align {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  /* IE */
  -moz-transform: translateY(-50%);
  /* Firefox */
  -webkit-transform: translateY(-50%);
  /* Safari and Chrome */
  -o-transform: translateY(-50%); }

.u-tc {
  text-align: center; }

.u-tl {
  text-align: left; }

.u-tr {
  text-align: right; }

.u-hide {
  display: none; }

.u-hide-mobile {
  display: none; }
  @media (min-width: 768px) {
    .u-hide-mobile {
      display: block; } }

.u-hide-desktop {
  display: block; }
  @media (min-width: 768px) {
    .u-hide-desktop {
      display: none; } }

.u-display-table {
  display: table; }

.u-delay01s {
  -webkit-animation-delay: 0.1s;
  -moz-animation-delay: 0.1s;
  animation-delay: 0.1s; }

.u-delay025s {
  -webkit-animation-delay: 0.25s;
  -moz-animation-delay: 0.25s;
  animation-delay: 0.25s; }

.u-delay05s {
  -webkit-animation-delay: 0.5s;
  -moz-animation-delay: 0.5s;
  animation-delay: 0.5s; }

.u-delay1s {
  -webkit-animation-delay: 1s;
  -moz-animation-delay: 1s;
  animation-delay: 1s; }

.minor-spacing {
  padding: 8px; }

.clickable {
  cursor: pointer; }

.centered {
  text-align: center; }

.uppercase {
  text-transform: uppercase; }
